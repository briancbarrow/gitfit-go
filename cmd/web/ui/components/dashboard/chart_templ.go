// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.639
package dashboard_components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "time"
import "github.com/briancbarrow/gitfit-go/internal/database/tenancy/db"

type ChartData struct {
	FirstWeekday     time.Weekday
	DayData          [][]time.Time
	WorkoutSetCounts []tenant_database.GetWorkoutSetCountsRow
	FirstDayFound    bool
}

func updateFirstDayFound(chartData *ChartData) string {
	chartData.FirstDayFound = true
	return ""
}

var colorMap = map[int]string{
	1: "bg-green-100",
	2: "bg-green-200",
	3: "bg-green-300",
	4: "bg-green-400",
	5: "bg-green-500",
	6: "bg-green-600",
	7: "bg-green-700",
	8: "bg-green-800",
	9: "bg-green-900",
}

func getClassForDay(day time.Time, workoutSetCounts []tenant_database.GetWorkoutSetCountsRow) string {
	for _, workoutSetCount := range workoutSetCounts {
		if workoutSetCount.Date == day.Format("2006-01-02") {
			if workoutSetCount.Count > 9 {
				return colorMap[9]
			}
			return colorMap[int(workoutSetCount.Count)]
		}
	}
	return "bg-gray-200"
}

func Chart(chartData ChartData) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"chart\" hx-swap-oob=\"outerHTML:#chart\" class=\"mt-8\"><h1>2024</h1><table class=\"w-full\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, weekDay := range chartData.DayData {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<tr class=\"m-4\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for dayIdx, day := range weekDay {
				if dayIdx == 0 {
					if day.Weekday() != chartData.FirstWeekday && !chartData.FirstDayFound {
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<td class=\"day-square h-4 border-4 border-white bg-white-200\"></td>")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
					} else {
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<span class=\"hidden found\">")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						var templ_7745c5c3_Var2 string
						templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(updateFirstDayFound(&chartData))
						if templ_7745c5c3_Err != nil {
							return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/web/ui/components/dashboard/chart.templ`, Line: 55, Col: 68}
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span>")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
					}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 = []any{"day-square", "h-4", "rounded", "border-4", "border-white", "bg-gray-100", getClassForDay(day, chartData.WorkoutSetCounts)}
				templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var3...)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<td class=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var3).String())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/web/ui/components/dashboard/chart.templ`, Line: 1, Col: 0}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><span class=\"hidden tooltip absolute\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(day.Format("2006-01-02"))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/web/ui/components/dashboard/chart.templ`, Line: 61, Col: 71}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span></td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</tr>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</table></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
