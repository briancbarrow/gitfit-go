// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (stytch_id, database_id, created)
	VALUES(?, ?, datetime('now'))
RETURNING stytch_id, database_id, created
`

type CreateUserParams struct {
	StytchID   string
	DatabaseID string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.StytchID, arg.DatabaseID)
	var i User
	err := row.Scan(&i.StytchID, &i.DatabaseID, &i.Created)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT stytch_id, database_id, created FROM users
WHERE stytch_id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, stytchID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, stytchID)
	var i User
	err := row.Scan(&i.StytchID, &i.DatabaseID, &i.Created)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT stytch_id, database_id, created FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.StytchID, &i.DatabaseID, &i.Created); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(SELECT true FROM users WHERE stytch_id = ?)
`

func (q *Queries) UserExists(ctx context.Context, stytchID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, userExists, stytchID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
